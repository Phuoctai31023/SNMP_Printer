<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <title>Qu·∫£n l√Ω M√°y In</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      body {
        font-family: "Roboto", sans-serif;
        background: #f5f6fa;
      }
      .status-online {
        color: #28a745 !important;
        font-weight: bold;
      }
      .status-offline {
        color: #dc3545 !important;
        font-weight: bold;
      }
      .status-warning {
        color: #ffc107 !important;
        font-weight: bold;
      }
      .overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        display: none;
        justify-content: center;
        align-items: center;
      }
      th {
        cursor: pointer;
        user-select: none;
      }
      th i {
        margin-left: 5px;
        font-size: 0.9em;
      }
      th.active-sort {
        background: #ffc107 !important;
        color: #000 !important;
      }
      td.highlight {
        background: #fff3cd !important;
      }
    </style>
  </head>
  <body>
    <!-- Overlay -->
    <div class="overlay" id="loadingOverlay">
      <div
        class="spinner-border text-primary"
        style="width: 4rem; height: 4rem"
        role="status"
      >
        <span class="visually-hidden">ƒêang x·ª≠ l√Ω...</span>
      </div>
    </div>

    <div class="container mt-4">
      <!-- Header -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary">Xin ch√†o, <%= user.username %> üëã</h2>
        <div class="d-flex align-items-center">
          <button
            type="button"
            class="btn btn-outline-dark me-2"
            data-bs-toggle="modal"
            data-bs-target="#snmpAutoModal"
          >
            <i class="bi bi-gear"></i> C√†i ƒë·∫∑t SNMP
          </button>
          <span id="autoStatus" class="text-muted small me-3"></span>
        </div>
        <div class="dropdown">
          <button
            class="btn btn-outline-dark dropdown-toggle"
            data-bs-toggle="dropdown"
          >
            <i class="bi bi-person-circle"></i> <%= user.username %> (<%=
            user.role %>)
          </button>
          <ul class="dropdown-menu dropdown-menu-end">
            <% if (user && user.role === 'admin') { %>
            <li>
              <a class="dropdown-item" href="/users"
                ><i class="bi bi-people me-2"></i>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</a
              >
            </li>
            <li>
              <a class="dropdown-item" href="/departments"
                ><i class="bi bi-building-gear me-2"></i>Qu·∫£n l√Ω b·ªô ph·∫≠n</a
              >
            </li>
            <% } %>
            <li>
              <a class="dropdown-item" href="/change-password"
                ><i class="bi bi-key me-2"></i>ƒê·ªïi m·∫≠t kh·∫©u</a
              >
            </li>
            <li>
              <a class="dropdown-item text-danger" href="/logout"
                ><i class="bi bi-box-arrow-right me-2"></i>ƒêƒÉng xu·∫•t</a
              >
            </li>
          </ul>
        </div>
      </div>

      <!-- L·∫ßn c·∫≠p nh·∫≠t -->
      <div class="alert alert-info py-2 px-3 mb-3 shadow-sm">
        <i class="bi bi-clock-history"></i>
        <span
          id="lastUpdateText"
          data-server-last="<%= lastUpdate ? (new Date(lastUpdate)).getTime() : '' %>"
        >
          <% if (lastUpdate) { %> L·∫ßn c·∫≠p nh·∫≠t: <%= new
          Date(lastUpdate).toLocaleString('vi-VN') %> <% } else { %> Ch∆∞a c√≥ l·∫ßn
          c·∫≠p nh·∫≠t n√†o <% } %>
        </span>
      </div>

      <!-- Th·ªëng k√™ -->
      <div class="row mb-4">
        <div class="col-md-4">
          <div class="card shadow-sm">
            <div class="card-body text-center">
              <h5 class="text-muted">T·ªïng s·ªë m√°y in</h5>
              <h3><%= printers.length %></h3>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card shadow-sm">
            <div class="card-body text-center">
              <h5 class="text-muted">Online</h5>
              <h3 class="text-success">
                <%= printers.filter(p=>p.online).length %>
              </h3>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card shadow-sm">
            <div class="card-body text-center">
              <h5 class="text-muted">Offline</h5>
              <h3 class="text-danger">
                <%= printers.filter(p=>!p.online).length %>
              </h3>
            </div>
          </div>
        </div>
      </div>

      <!-- Th√™m m√°y in -->
      <% if (user.role === 'admin') { %>
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">
          <i class="bi bi-printer-fill"></i> Th√™m M√°y In
        </div>
        <div class="card-body">
          <form
            method="POST"
            action="/printers/add"
            class="row g-3"
            id="addPrinterForm"
          >
            <div class="col-md-4">
              <input
                type="text"
                id="ip_address"
                name="ip_address"
                class="form-control"
                placeholder="IP Address"
                required
                pattern="^(?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)$"
                oninvalid="if(this.validity.valueMissing){this.setCustomValidity('Vui l√≤ng nh·∫≠p IP');} 
                else if(this.validity.patternMismatch){this.setCustomValidity('Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng IP');}"
                oninput="this.setCustomValidity('')"
              />
            </div>
            <div class="col-md-4">
              <select
                id="dpm_ID"
                name="dpm_ID"
                class="form-select"
                required
                oninvalid="this.setCustomValidity('Vui l√≤ng ch·ªçn b·ªô ph·∫≠n')"
                oninput="this.setCustomValidity('')"
              >
                <option value="">-- Ch·ªçn b·ªô ph·∫≠n --</option>
                <% departments.forEach(dep=>{ %>
                <option value="<%= dep._id %>"><%= dep.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="col-md-4">
              <button type="submit" class="btn btn-success w-100">
                <i class="bi bi-plus-circle"></i> Th√™m
              </button>
            </div>
          </form>
        </div>
      </div>
      <% } %>

      <!-- B·ªô l·ªçc -->
      <div class="row g-3 mb-3">
        <div class="col-md-6">
          <input
            type="text"
            id="searchInput"
            class="form-control"
            placeholder="üîç T√¨m ki·∫øm theo IP, Lo·∫°i, Serial"
            onkeyup="filterTable()"
          />
        </div>
        <div class="col-md-3">
          <select
            id="statusFilter"
            class="form-select"
            onchange="filterTable()"
          >
            <option value="">-- L·ªçc tr·∫°ng th√°i --</option>
            <option value="Online">Online</option>
            <option value="Offline">Offline</option>
          </select>
        </div>
        <div class="col-md-3">
          <select
            id="departmentFilter"
            class="form-select"
            onchange="filterTable()"
          >
            <option value="">-- L·ªçc b·ªô ph·∫≠n --</option>
            <% departments.forEach(dep=>{ %>
            <option value="<%= dep._id %>"><%= dep.name %></option>
            <% }) %>
          </select>
        </div>
      </div>

      <!-- Ph√¢n trang -->
      <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
          Hi·ªÉn th·ªã <span id="currentRange">0-0</span> /
          <span id="totalItems">0</span> m√°y in
        </div>
        <nav>
          <ul class="pagination pagination-sm mb-0" id="pagination"></ul>
        </nav>
      </div>

      <!-- Danh s√°ch m√°y in -->
      <div class="card shadow-sm">
        <div
          class="card-header bg-dark text-white d-flex justify-content-between align-items-center"
        >
          <div><i class="bi bi-list-ul"></i> Danh S√°ch M√°y In</div>
          <form
            id="updateAllForm"
            method="POST"
            action="/printers/snmp-update-all"
          >
            <button type="submit" class="btn btn-success btn-sm">
              <i class="bi bi-arrow-repeat"></i> C·∫≠p nh·∫≠t t·∫•t c·∫£
            </button>
          </form>
        </div>
        <div class="table-responsive">
          <table id="printerTable" class="table table-hover align-middle mb-0">
            <thead class="table-dark">
              <tr>
                <th onclick="sortTable(0,this)">
                  IP <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(1,this)">
                  Lo·∫°i <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(2,this)">
                  Serial <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(3,this)">
                  B·ªô ph·∫≠n <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(4,this)">
                  Tr·∫°ng th√°i <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(5,this)">
                  T√¨nh tr·∫°ng <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(6,this)">
                  Drum Unit <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(7,this)">
                  Page Counter <i class="bi bi-arrow-down-up"></i>
                </th>
                <th onclick="sortTable(8,this)">
                  Toner Level <i class="bi bi-arrow-down-up"></i>
                </th>
                <% if (user.role === 'admin') { %>
                <th>H√†nh ƒë·ªông</th>
                <% } %>
              </tr>
            </thead>
            <tbody id="printerBody">
              <% if (printers.length > 0) { printers.forEach(p=>{ let depId="",
              depName="-"; if (p.dpm_ID){
              depId=(p.dpm_ID._id||p.dpm_ID).toString(); let
              found=departments.find(d=>d._id.toString()===depId); if(found)
              depName=found.name; else if(p.dpm_ID.name) depName=p.dpm_ID.name;
              } %>
              <tr>
                <td>
                  <% if (p.publicLink) { %>
                  <a href="<%= p.publicLink %>" class="fw-bold text-primary">
                    <%= p.ip_address %>
                  </a>
                  <% } else { %> <%= p.ip_address %> <% } %>
                </td>
                <td><%= p.printer_type||"-" %></td>
                <td><%= p.serial_number||"-" %></td>
                <td data-dep-id="<%= depId %>"><%= depName %></td>
                <td class="<%= p.online?'status-online':'status-offline' %>">
                  <%= p.online?'Online':'Offline' %>
                </td>
                <td><%= p.condition||"-" %></td>
                <td><%= p.drum_unit||"-" %></td>
                <td><%= p.page_counter||"-" %></td>
                <td class="text-center">
                  <% let raw=p.toner_level,
                  parsed=parseInt((raw||"").toString().replace(/[^\d]/g,""));
                  if(!raw||raw==="N/A"||isNaN(parsed)){ %>
                  <span class="text-muted">N/A</span>
                  <% } else { let level=Math.min(Math.max(parsed,0),100); let
                  barClass=level>50?"bg-success":level>20?"bg-warning":"bg-danger";
                  %>
                  <div class="progress" style="height: 16px">
                    <div
                      class="progress-bar <%= barClass %>"
                      style="width: <%= level %>%"
                    >
                      <%= level %>%
                    </div>
                  </div>
                  <% } %>
                </td>
                <% if(user.role==='admin'){ %>
                <td class="text-center">
                  <button
                    class="btn btn-warning btn-sm me-1"
                    onclick="openEditModalFromBtn(this)"
                    data-id="<%= p._id %>"
                    data-ip="<%= p.ip_address %>"
                    data-dpm="<%= depId %>"
                  >
                    <i class="bi bi-pencil-square"></i>
                  </button>
                  <form
                    method="POST"
                    action="/printers/delete/<%= p._id %>"
                    style="display: inline"
                    onsubmit="return confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√°y in n√†y?');"
                  >
                    <button type="submit" class="btn btn-danger btn-sm">
                      <i class="bi bi-trash"></i>
                    </button>
                  </form>
                </td>
                <% } %>
              </tr>
              <% }) } else { %>
              <tr>
                <td
                  colspan="<%= user.role==='admin'?10:9 %>"
                  class="text-center text-muted"
                >
                  Kh√¥ng c√≥ d·ªØ li·ªáu m√°y in
                </td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Modal c√†i ƒë·∫∑t t·ª± ƒë·ªông c·∫≠p nh·∫≠t SNMP -->
    <div
      class="modal fade"
      id="snmpAutoModal"
      tabindex="-1"
      aria-labelledby="snmpAutoModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content rounded-3 shadow">
          <div class="modal-header border-0">
            <h5 class="modal-title fw-semibold" id="snmpAutoModalLabel">
              <i class="bi bi-clock-history me-2 text-primary"></i>
              C√†i ƒë·∫∑t t·ª± ƒë·ªông c·∫≠p nh·∫≠t SNMP
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="ƒê√≥ng"
            ></button>
          </div>

          <div class="modal-body pt-0">
            <!-- C√¥ng t·∫Øc b·∫≠t/t·∫Øt -->
            <div class="form-check form-switch mb-3">
              <input
                class="form-check-input"
                type="checkbox"
                id="snmpAutoEnable"
              />
              <label class="form-check-label fw-medium" for="snmpAutoEnable">
                B·∫≠t ch·∫ø ƒë·ªô t·ª± ƒë·ªông
              </label>
            </div>

            <!-- Nh√≥m l·ª±a ch·ªçn kho·∫£ng th·ªùi gian -->
            <div class="mb-2 fw-medium">Kho·∫£ng th·ªùi gian c·∫≠p nh·∫≠t</div>
            <div class="d-flex flex-wrap gap-2">
              <% [1,3,5,10,15,30,60].forEach(function(min){ %>
              <input
                type="radio"
                class="btn-check"
                name="snmpInterval"
                id="snmp-<%= min %>"
                value="<%= min %>"
              />
              <label
                class="btn btn-outline-primary rounded-pill px-3"
                for="snmp-<%= min %>"
              >
                <%= min %> ph√∫t
              </label>
              <% }); %>
            </div>

            <div class="text-muted small mt-3">
              <i class="bi bi-info-circle me-1"></i>
              Sau m·ªói l·∫ßn c·∫≠p nh·∫≠t, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫£i l·∫°i trang ƒë·ªÉ hi·ªÉn
              th·ªã d·ªØ li·ªáu m·ªõi nh·∫•t.
            </div>
          </div>

          <div class="modal-footer border-0">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">
              <i class="bi bi-x-circle me-1"></i> ƒê√≥ng
            </button>
            <button type="button" id="saveSnmpSettings" class="btn btn-primary">
              <i class="bi bi-save me-1"></i> L∆∞u c√†i ƒë·∫∑t
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal s·ª≠a -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <form method="POST" id="editForm">
          <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
              <h5 class="modal-title">
                <i class="bi bi-pencil-square"></i> S·ª≠a m√°y in
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">IP Address</label>
                <input
                  type="text"
                  class="form-control"
                  id="edit_ip"
                  name="ip_address"
                  required
                  pattern="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}$"
                  oninvalid="if(this.validity.valueMissing){this.setCustomValidity('Vui l√≤ng nh·∫≠p IP');} else if(this.validity.patternMismatch){this.setCustomValidity('Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng IP');}"
                  oninput="this.setCustomValidity('')"
                />
              </div>
              <div class="mb-3">
                <label class="form-label">B·ªô ph·∫≠n</label>
                <select
                  class="form-select"
                  id="edit_dpm"
                  name="dpm_ID"
                  required
                >
                  <% if (Array.isArray(departments) && departments.length > 0) {
                  %> <% departments.forEach(function(dep){ %>
                  <option value="<%= dep._id %>"><%= dep.name %></option>
                  <% }); %> <% } %>
                </select>
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                ƒê√≥ng
              </button>
              <button type="submit" class="btn btn-warning">
                L∆∞u thay ƒë·ªïi
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Scripts -->
    <script>
      function showLoading() {
        document.getElementById("loadingOverlay").style.display = "flex";
      }
      function hideLoading() {
        document.getElementById("loadingOverlay").style.display = "none";
      }
      async function confirmDelete(id) {
        Swal.fire({
          title: "X√°c nh·∫≠n",
          text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√°y in n√†y?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "X√≥a",
          cancelButtonText: "H·ªßy",
        }).then((r) => {
          if (r.isConfirmed) {
            window.location.href = "/printers/delete/" + id;
          }
        });
      }

      const params = new URLSearchParams(window.location.search);
      const error = params.get("error");
      const success = params.get("success");

      if (error) {
        Swal.fire({
          icon: "error",
          title: "L·ªói",
          text: decodeURIComponent(error),
          confirmButtonColor: "#d33",
        }).then(() =>
          window.history.replaceState(
            {},
            document.title,
            window.location.pathname
          )
        );
      }

      if (success) {
        Swal.fire({
          icon: "success",
          title: "Th√†nh c√¥ng",
          text: decodeURIComponent(success),
          confirmButtonColor: "#28a745",
        }).then(() =>
          window.history.replaceState(
            {},
            document.title,
            window.location.pathname
          )
        );
      }

      let sortDirections = {};
      function sortTable(colIndex, headerEl) {
        const table = document.getElementById("printerTable");
        const tbody = table.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr")).filter((r) =>
          r.querySelector("td")
        );
        sortDirections[colIndex] = !sortDirections[colIndex];

        rows.sort((a, b) => {
          let cellA = a.children[colIndex].innerText.trim();
          let cellB = b.children[colIndex].innerText.trim();
          let numA = parseFloat(cellA.replace(/[^0-9.-]/g, ""));
          let numB = parseFloat(cellB.replace(/[^0-9.-]/g, ""));
          if (!isNaN(numA) && !isNaN(numB)) {
            return sortDirections[colIndex] ? numA - numB : numB - numA;
          }
          return sortDirections[colIndex]
            ? cellA.localeCompare(cellB, "vi", { sensitivity: "base" })
            : cellB.localeCompare(cellA, "vi", { sensitivity: "base" });
        });

        tbody.innerHTML = "";
        rows.forEach((row) => tbody.appendChild(row));

        document
          .querySelectorAll("th")
          .forEach((th) => th.classList.remove("active-sort"));
        document
          .querySelectorAll("td")
          .forEach((td) => td.classList.remove("highlight"));
        document
          .querySelectorAll("th i")
          .forEach((icon) => (icon.className = "bi bi-arrow-down-up"));

        const icon = headerEl.querySelector("i");
        icon.className = sortDirections[colIndex]
          ? "bi bi-arrow-up"
          : "bi bi-arrow-down";

        headerEl.classList.add("active-sort");
        tbody.querySelectorAll("tr").forEach((row) => {
          row.children[colIndex] &&
            row.children[colIndex].classList.add("highlight");
        });
      }

      let originalRows = [];
      let currentPage = 1;
      let rowsPerPage = 10;

      function filterTable() {
        let searchValue = document
          .getElementById("searchInput")
          .value.toLowerCase();
        let statusValue = document.getElementById("statusFilter").value;
        // l·∫•y value l√† _id (kh√¥ng toLowerCase)
        let departmentValue = document.getElementById("departmentFilter").value;

        let filteredRows = originalRows.filter((row) => {
          if (!row.querySelector("td")) return false;
          let cells = row.getElementsByTagName("td");
          let ip = (cells[0].innerText || "").toLowerCase();
          let type = (cells[1].innerText || "").toLowerCase();
          let serial = (cells[2].innerText || "").toLowerCase();
          // ƒë·ªçc dep id t·ª´ data attribute
          let departmentId = cells[3].getAttribute("data-dep-id") || "";
          let status = (cells[4].innerText || "").trim();

          let matchesSearch =
            ip.includes(searchValue) ||
            type.includes(searchValue) ||
            serial.includes(searchValue);
          let matchesStatus =
            statusValue === "" || status.includes(statusValue);
          let matchesDepartment =
            departmentValue === "" || departmentId === departmentValue;

          return matchesSearch && matchesStatus && matchesDepartment;
        });

        renderTable(filteredRows);
      }

      function renderTable(filteredRows) {
        let tbody = document.getElementById("printerBody");
        document.getElementById("totalItems").innerText = filteredRows.length;

        let totalPages = Math.ceil(filteredRows.length / rowsPerPage) || 1;
        if (currentPage > totalPages) currentPage = 1;
        let start = (currentPage - 1) * rowsPerPage;
        let end = start + rowsPerPage;

        document.getElementById("currentRange").innerText =
          filteredRows.length > 0
            ? `${start + 1}-${Math.min(end, filteredRows.length)}`
            : "0-0";

        tbody.innerHTML = "";
        if (filteredRows.length === 0) {
          // l·∫•y s·ªë c·ªôt ƒë·ªông
          const colCount = document.querySelectorAll(
            "#printerTable thead th"
          ).length;
          tbody.innerHTML = `<tr><td colspan="${colCount}" class="text-center text-muted">Kh√¥ng c√≥ d·ªØ li·ªáu m√°y in</td></tr>`;
        } else {
          filteredRows
            .slice(start, end)
            .forEach((row) => tbody.appendChild(row));
        }

        renderPagination(totalPages);
      }

      function renderPagination(totalPages) {
        let pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        for (let i = 1; i <= totalPages; i++) {
          let li = document.createElement("li");
          li.className = "page-item" + (i === currentPage ? " active" : "");
          let a = document.createElement("a");
          a.className = "page-link";
          a.href = "#";
          a.innerText = i;
          a.onclick = function (e) {
            e.preventDefault();
            currentPage = i;
            filterTable();
          };
          li.appendChild(a);
          pagination.appendChild(li);
        }
      }

      function openEditModalFromBtn(btn) {
        const id = btn.dataset.id;
        const ip = btn.dataset.ip || "";
        const dpm = btn.dataset.dpm || "";
        document.getElementById("edit_ip").value = ip;
        document.getElementById("edit_dpm").value = dpm;
        document.getElementById("editForm").action = "/printers/update/" + id;
        let modal = new bootstrap.Modal(document.getElementById("editModal"));
        modal.show();
      }

      window.onload = function () {
        // Kh·ªüi t·∫°o originalRows sau khi to√†n b·ªô DOM ƒë√£ render
        originalRows = Array.from(
          document.querySelectorAll("#printerBody tr")
        ).filter((r) => r.querySelector("td"));
        filterTable();
      };
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SNMP Auto Update client script (placed AFTER bootstrap bundle so bootstrap.Modal is available) -->
    <script>
      (function () {
        const STORAGE_KEY_ENABLED = "snmp_auto_enabled";
        const STORAGE_KEY_INTERVAL = "snmp_auto_interval"; // minutes
        let autoTimerId = null;

        function getSavedInterval() {
          const v = localStorage.getItem(STORAGE_KEY_INTERVAL);
          return v !== null ? parseInt(v, 10) : 1;
        }
        function isEnabled() {
          return localStorage.getItem(STORAGE_KEY_ENABLED) === "true";
        }

        function updateAutoStatusText() {
          const el = document.getElementById("autoStatus");
          if (!el) return;
          if (isEnabled()) {
            const mn = getSavedInterval();
            el.textContent = `T·ª± ƒë·ªông: B·∫¨T (${mn} ph√∫t)`;
          } else {
            el.textContent = "T·ª± ƒë·ªông: T·∫ÆT";
          }
        }

        async function performSnmpUpdateAndReload() {
          try {
            if (typeof showLoading === "function") showLoading();
            const res = await fetch("/printers/snmp-update-all", {
              method: "POST",
            });
            if (res.ok) {
              saveLastUpdate();
              window.location.reload();
            } else {
              console.error("Update failed", res.status);
            }
          } catch (e) {
            console.error("Auto SNMP update failed:", e);
          }
        }

        function startAutoTimer() {
          stopAutoTimer();
          const minutes = getSavedInterval();
          if (!isEnabled() || !minutes || minutes <= 0) return;
          autoTimerId = setInterval(() => {
            performSnmpUpdateAndReload();
          }, minutes * 60 * 1000);
          console.log("Auto SNMP started (every " + minutes + " minutes)");
        }

        function stopAutoTimer() {
          if (autoTimerId) {
            clearInterval(autoTimerId);
            autoTimerId = null;
          }
        }

        function initControls() {
          // set radios
          const saved = getSavedInterval();
          const radio = document.querySelector(
            `input[name="snmpInterval"][value="${saved}"]`
          );
          if (radio) radio.checked = true;

          const chk = document.getElementById("snmpAutoEnable");
          if (chk) chk.checked = isEnabled();

          const saveBtn = document.getElementById("saveSnmpSettings");
          if (saveBtn) {
            saveBtn.addEventListener("click", function () {
              const sel = Array.from(
                document.getElementsByName("snmpInterval")
              ).find((r) => r.checked);
              const val = sel ? parseInt(sel.value, 10) : 1;
              const enabled = document.getElementById("snmpAutoEnable").checked;

              localStorage.setItem(STORAGE_KEY_INTERVAL, String(val));
              localStorage.setItem(
                STORAGE_KEY_ENABLED,
                enabled ? "true" : "false"
              );

              updateAutoStatusText();

              if (enabled && val > 0) {
                startAutoTimer();
                // ch·∫°y c·∫≠p nh·∫≠t ngay khi b·∫≠t v√† l∆∞u (n·∫øu b·∫°n kh√¥ng mu·ªën ch·∫°y ngay, x√≥a d√≤ng d∆∞·ªõi)
                performSnmpUpdateAndReload();
              } else {
                stopAutoTimer();
              }

              // ƒë√≥ng modal
              const modalEl = document.getElementById("snmpAutoModal");
              if (modalEl) {
                const modal =
                  bootstrap.Modal.getInstance(modalEl) ||
                  new bootstrap.Modal(modalEl);
                modal.hide();
              }
            });
          }
        }

        document.addEventListener("DOMContentLoaded", function () {
          // m·∫∑c ƒë·ªãnh l·∫ßn ƒë·∫ßu: enabled=true, interval=1
          if (localStorage.getItem(STORAGE_KEY_INTERVAL) === null) {
            localStorage.setItem(STORAGE_KEY_INTERVAL, "1");
          }
          if (localStorage.getItem(STORAGE_KEY_ENABLED) === null) {
            localStorage.setItem(STORAGE_KEY_ENABLED, "true");
          }

          updateAutoStatusText();
          initControls();

          // start timer on load if enabled
          if (isEnabled() && getSavedInterval() > 0) {
            startAutoTimer();
            // (Kh√¥ng ch·∫°y c·∫≠p nh·∫≠t ngay khi load trang; ch·ªâ ch·∫°y theo chu k·ª≥. N·∫øu mu·ªën ch·∫°y ngay khi load, b·ªè comment d√≤ng d∆∞·ªõi)
            // performSnmpUpdateAndReload();
          }
        });
      })();
    </script>
    <script>
      const STORAGE_KEY_LASTUPDATE = "snmp_last_update";

      function formatDateTime(ts) {
        const d = new Date(parseInt(ts, 10));
        return d.toLocaleString("vi-VN");
      }

      function updateLastUpdateBox() {
        const el = document.getElementById("lastUpdateText");
        const last = localStorage.getItem(STORAGE_KEY_LASTUPDATE);
        if (!el) return;
        if (last) {
          el.textContent = "L·∫ßn c·∫≠p nh·∫≠t: " + formatDateTime(last);
        } else {
          // n·∫øu server ƒë√£ cung c·∫•p lastUpdate th√¨ gi·ªØ n·ªôi dung server; script n√†y ch·ªâ override khi c√≥ localStorage
          const serverProvided = el.getAttribute("data-server-last");
          if (!serverProvided) {
            el.textContent = "Ch∆∞a c√≥ l·∫ßn c·∫≠p nh·∫≠t n√†o";
          }
        }
      }
      function saveLastUpdate() {
        localStorage.setItem(STORAGE_KEY_LASTUPDATE, Date.now().toString());
        updateLastUpdateBox();
      }
      document.addEventListener("DOMContentLoaded", function () {
        updateLastUpdateBox();

        // Intercept "C·∫≠p nh·∫≠t t·∫•t c·∫£" ƒë·ªÉ g·ª≠i b·∫±ng fetch v√† ch·ªâ l∆∞u lastUpdate khi server tr·∫£ v·ªÅ th√†nh c√¥ng
        const updateForm = document.getElementById("updateAllForm");
        if (updateForm) {
          updateForm.addEventListener("submit", async function (e) {
            e.preventDefault();
            if (typeof showLoading === "function") showLoading();
            const submitBtn = updateForm.querySelector('button[type="submit"]');
            if (submitBtn) submitBtn.disabled = true;
            try {
              const res = await fetch(updateForm.action, {
                method: "POST",
                credentials: "same-origin",
                headers: { Accept: "text/html" },
              });
              if (res.ok) {
                // ch·ªâ l∆∞u l·∫ßn c·∫≠p nh·∫≠t khi server tr·∫£ v·ªÅ 2xx
                saveLastUpdate();
                window.location.reload();
              } else {
                const txt = await res.text();
                console.error("Update all failed", res.status, txt);
                Swal.fire({
                  icon: "error",
                  title: "L·ªói",
                  text: "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
                });
              }
            } catch (err) {
              console.error(err);
              Swal.fire({
                icon: "error",
                title: "L·ªói",
                text: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server",
              });
            } finally {
              if (typeof hideLoading === "function") hideLoading();
              if (submitBtn) submitBtn.disabled = false;
            }
          });
        }
      });
    </script>
  </body>
</html>
